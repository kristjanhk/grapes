buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '2.0.2'
  }
}

plugins {
  id 'org.hidetake.ssh' version '2.9.0'
}

apply from: "$rootDir/common.gradle"

loadProperties(project, true, "ver", "$rootDir/version.properties")
loadProperties(project, true, "dir", "$rootDir/path.properties")

subprojects {
  apply plugin: 'application'
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: "com.github.johnrengelman.shadow"

  group 'eu.kyngas.grapes'

  targetCompatibility = ver.java
  sourceCompatibility = ver.java

  repositories {
    mavenCentral()
    jcenter()
  }

  shadowJar {
    baseName = 'grapes'
    destinationDir = file("$rootDir/output")
  }

  dependencies {
    compile group: 'ch.qos.logback', name: 'logback-classic', version: ver.logback
    compile group: 'io.vertx', name: 'vertx-core', version: ver.vertx
    compile group: 'io.vertx', name: 'vertx-service-discovery', version: ver.vertx
    compile group: 'io.vertx', name: 'vertx-service-proxy', version: ver.vertx

    compileOnly group: 'org.projectlombok', name: 'lombok', version: ver.lombok
    compileOnly group: 'io.vertx', name: 'vertx-codegen', version: ver.vertx
    compileOnly group: 'io.vertx', name: 'vertx-sockjs-service-proxy', version: ver.vertx
    compileOnly group: 'io.vertx', name: 'vertx-lang-js', version: ver.vertx

    testCompile group: 'io.vertx', name: 'vertx-junit5', version: ver.vertx
  }

  sourceSets {
    main {
      java {
        srcDirs = [dir.main_java, dir.main_gen]
      }
      resources {
        srcDirs = [dir.main_resources]
      }
    }
    test {
      java {
        srcDirs = [dir.test_java]
      }
      resources {
        srcDirs = [dir.test_resources]
      }
    }
  }

  idea {
    module {
      generatedSourceDirs += file(dir.main_gen)
      outputDir = file("${projectDir}${dir.build_main}")
      testOutputDir = file("${projectDir}${dir.build_test}")
    }
  }

  task proxyGen(type: JavaCompile) {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.compileOnly
    destinationDir = project.file(dir.main_gen)
    options.compilerArgs = [
        '-proc:only',
        '-processor',
        'io.vertx.codegen.CodeGenProcessor',
        "-Acodegen.output=${project.projectDir}/${dir.main_gen}",
        "-Acodegen.generators=${ver.codegen_processors}"
    ]
  }

  compileJava {
    options.encoding = 'UTF-8'
    dependsOn proxyGen
  }

  task proxyClean(type: Delete) {
    delete "${dir.main_gen}"
  }
  clean.dependsOn proxyClean

  applicationDefaultJvmArgs = getDebugOptions()

  task deploy(dependsOn: shadowJar) {
    doLast {
      ssh.run {
        session(remotes.kyngas) {
          put from: "${shadowJar.destinationDir}/${getBundleName(shadowJar)}", into: getServerOutputDir(remotes)
        }
      }
    }
  }

  task runRemote(dependsOn: deploy) {
    doLast {
      ssh.run {
        session(remotes.kyngas) {
          execute "java -jar ${getServerOutputDir(remotes)}${getBundleName(shadowJar)}", pty: true
        }
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = ver.gradle as String
  //noinspection UnnecessaryQualifiedReference
  distributionType = Wrapper.DistributionType.ALL
}

static List<String> getDebugOptions() {
  String debugger = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
  String eventLoopChecker = "-Dvertx.options.maxEventLoopExecuteTime=${Long.MAX_VALUE}"
  String workerChecker = "-Dvertx.options.maxWorkerExecuteTime=${Long.MAX_VALUE}"
  String mark = '-Dvertx.debug=true'
  return [debugger, eventLoopChecker, workerChecker, mark]
}

static String getBundleName(shadow) {
  return "${shadow.baseName}-${shadow.classifier}.jar"
}

static String getServerOutputDir(remotes) {
  return "/home/${remotes.kyngas.user}/Downloads/"
}

remotes {
  kyngas {
    host = 'kyngas.eu'
    user = 'kristjan'
    identity = file('/misc/id_rsa')
  }
}

ssh.settings {
  knownHosts = file('/misc/known_hosts')
}